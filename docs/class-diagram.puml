@startuml
    package DataStoreModule {
        package Entities {
            class Channel {
                +string channelName
                +Date joinedOn
                +songRequests: SongRequest[]
            }

            class Game {
                +id: number
                +name: string
                +displayName: string
            }

            class Song {
                +id: number
                +songHash: string
                +title: string
                +artist: string
                +mapper: string
                +game: Game
                +requests: SongRequest[]
            }

            class SongRequest {
                +id: number
                +song: Song
                +requesterName: string
                +requestTimestamp: number
                +requestOrder: number
                +channel: Channel
            }

            Song ..> SongRequest: 0..*
            Game ..> Song: 0..*
            Channel ..> SongRequest: 0..*

            note top of Channel
                If a channel is in this table, the bot should join it.
            endnote
        }
    }

    package Chat {
        class ChatMessage {
            <<interface>>
            +number id
            +string username
            +string channel_name
            +string message
            +Map<string, string[]> emotes
            +Date date
            +string color
        }
        package ChatClient {
            abstract class AbstractChatClient {
                {abstract} Promise<void> connect()
                {abstract} Promise<void> disconnect()
                {abstract} +Observable<ChatMessage> messages$
                {abstract} Promise<void> joinChannel(string channelName)
                {abstract} Promise<void> leaveChannel(string channelName)
            }

            class TwitchChatClient {
                +Observable<ChatMessage> messages$
                -RefreshingAuthProvider authProvider
                -any tokenData
                -ChatClient chatClient
                -string twitchAppClientId
                -string twitchAppClientSecret
                -string tokenFilePath
                -string twitchChannel
                +Promise<void> connect()
                +Promise<void> disconnect()
                -void loadTokenData()
            }

            TwitchChatClient ..> AbstractChatClient : implements
            AbstractChatClient ..> ChatMessage : returns
        }

        class ChatManagerService {
            -AbstractChatClient[] chatClients
            -eventEmitter: EventEmitter2
            +constructor(AbstractChatClient[] chatClients)
            +void addChatClient(AbstractChatClient chatClient)
            +void connectAll()
        }

        class ChatMessageReceiveEvent {
            +ChatMessage chatMessage
        }

        class ChatMessageSendEvent {
            +string channel_name
            +string message
        }

        class ChatMessageSendListener {
            -ChatManagerService chatManagerService
            +Promise<void> handle(ChatMessageSendEvent chatMessageSendEvent)
        }

        ChatManagerService ..> ChatMessageReceiveEvent: emits
        ChatMessageSendListener ..> ChatMessageSendEvent: listens for
        ChatMessageSendListener ..> ChatManagerService: depends on
        ChatMessageReceiveEvent ..> ChatMessage: depends on
        ChatManagerService o.. AbstractChatClient: 0..*
    }

    package BotCommands {
        class BotCommandInterface {
            <<interface>>
            +bool matchesTrigger(string message)
            +Promise<void> execute(ChatMessage chatMessage)
        }

        class BotCommandListener {
            -BotCommand[] botCommands
            +void addBotCommand(BotCommand botCommand)
            +Promise<void> handle(ChatMessage chatMessage)
        }

        BotCommandListener ..> ChatMessageReceiveEvent: listens for
        BotCommandInterface ..> ChatMessageSendEvent: emits

        class JoinChannelBotCommand {
            -Repository<Channel> channelRepository
            +bool matchesTrigger(string message)
            +Promise<void> execute(ChatMessage chatMessage)
        }

        JoinChannelBotCommand ..> BotCommandInterface: implements
        JoinChannelBotCommand ..> Channel: uses
    }

    package SongStoreModule {
        package Services {
            class SongImporterInterface {
                <<interface>>
                +gameName: string
                +importSongs: Promise<number>
            }
            class AudioTripSongImporter {
                -songService: SongService
                -gameRepository: Repository<Game>
                +gameName: string
                +importSongs: Promise<number>
            }

            class SongService {
                -songRepository: Repository<Song>
                -gameRepository: Repository<Game>
                +searchSongs(query: string, game: Game): Promise<Song[]>
                +saveSong(title: string, artist: string, mapper: string, hash?: string): Promise<Song>
            }

            AudioTripSongImporter --> SongImporterInterface: implements
            AudioTripSongImporter ..> SongService: depends on

        }

        class SongStoreModule {
        }
    }

    package SongRequestModule {
        package Services {

            class SongRequestErrorType {
                <<enum>>
                NOT_FOUND
                ALREADY_IN_QUEUE
                SERVER_ERROR
            }
            interface SongRequestResponse {
                <<interface>>
                +success: bool
                +errorType: SongRequestErrorType
            }

            class SongRequestService {
                -songService: SongService
                -songRequestRepository: Repository<SongRequest>
                +addRequest(song: Song, channel: Channel): Promise<SongRequestResponse>
                +removeRequest(song: Song, channel: Channel): Promise<SongRequestResponse>
                +removeLastRequest(channel: Channel, requesterName?: string): Promise<SongRequestResponse>
                +getNextRequest(channel: Channel): Promise<SongRequest>
                +getAllSongRequests(channel: Channel): Promise<SongRequest[]>
                +clearChannelSongRequests(channel: Channel): Promise<SongRequestResponse>
            }

            SongRequestService ..> SongService: depends on
            SongRequestService ..> SongRequestResponse: returns
            SongRequestResponse ..> SongRequestErrorType: uses
        }
    }
@enduml
